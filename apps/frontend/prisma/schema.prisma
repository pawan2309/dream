generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String               @id @default(uuid())
  username                String               @unique
  password                String
  role                    Role
  parentId                String?
  balance                 Float                @default(0)
  isActive                Boolean              @default(true)
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @updatedAt
  name                    String?
  casinocommission        Float                @default(0)
  code                    String?
  contactno               String?
  cshare                  Float                @default(0)
  icshare                 Float                @default(0)
  matchcommission         Float                @default(0)
  mobileshare             Float                @default(100)
  reference               String?
  session_commission_type String               @default("No Comm")
  sessioncommission       Float                @default(0)
  share                   Float                @default(0)
  commissionType          String?
  casinoStatus            Boolean?
  matchCommission         Float?
  sessionCommission       Float?
  creditLimit             Float                @default(0)
  exposure                Float                @default(0)
  bets                    Bet[]
  ledger                  Ledger[]
  loginSessions           LoginSession[]
  profitDistributions     ProfitDistribution[]
  parent                  User?                @relation("UserHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children                User[]               @relation("UserHierarchy")
}

model Ledger {
  id              String     @id @default(uuid())
  userId          String
  sourceUserId    String?     // Who triggered this (e.g., downline user)
  matchId         String?     // Match or game ID
  collection      String?     // Payment method / type of fund (e.g., CA1 CASH)
  debit           Float       @default(0)
  credit          Float       @default(0)
  balanceAfter    Float
  type            LedgerType
  transactionType String?     // More granular info if needed (e.g., casino, cricket, session, bonus)
  remark          String?
  referenceId     String?     // To trace back to bet or original PnL record
  createdAt       DateTime    @default(now())

  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model Match {
  id         String      @id @default(uuid())
  title      String
  externalId String      @unique
  status     MatchStatus @default(UPCOMING)
  createdAt  DateTime    @default(now())
  bets       Bet[]
}

model Bet {
  id                  String               @id @default(uuid())
  userId              String
  matchId             String
  odds                Float
  stake               Float
  potentialWin        Float
  status              BetStatus            @default(PENDING)
  createdAt           DateTime             @default(now())
  match               Match                @relation(fields: [matchId], references: [id])
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  profitDistributions ProfitDistribution[]
}

model ProfitDistribution {
  id           String   @id @default(uuid())
  betId        String
  userId       String
  profitShare  Float
  amountEarned Float
  createdAt    DateTime @default(now())
  bet          Bet      @relation(fields: [betId], references: [id])
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LoginSession {
  id              String    @id @default(uuid())
  userId          String
  loginAt         DateTime  @default(now())
  logoutAt        DateTime?
  ipAddress       String?
  userAgent       String?
  deviceType      String?
  location        String?
  sessionDuration Int?
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([loginAt])
  @@index([isActive])
}

enum Role {
  ADMIN
  SUPER_ADMIN
  SUB_OWNER
  SUB
  MASTER
  SUPER_AGENT
  AGENT
  USER
}

enum LedgerType {
  DEPOSIT         // Manual or online deposit
  WITHDRAWAL      // Manual or online withdrawal
  WIN             // User won money
  LOSS            // User lost money
  ADJUSTMENT      // Manual balance correction

  LIMIT_UPDATE    // Credit limit or exposure changed by upline
  PNL_CREDIT      // Profit earned from downline's loss (e.g., agent's share)
  PNL_DEBIT       // Loss paid because downline won (e.g., agent owes)
  SETTLEMENT      // Weekly/monthly dues manually settled
}

enum MatchStatus {
  UPCOMING
  LIVE
  CLOSED
}

enum BetStatus {
  PENDING
  WON
  LOST
}
